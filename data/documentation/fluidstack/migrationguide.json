{"primaryContentSections":[{"content":[{"text":"Drop UINavigationController and Modal-presentation, use FluidStackController instead.","type":"heading","anchor":"Drop-UINavigationController-and-Modal-presentation-use-FluidStackController-instead","level":2},{"inlineContent":[{"text":"Try to think about creating all of the transitions with UINavigationController.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because it could say FluidStackController is just like yet another UINavigationController."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Motivation is here (Motivation section): "},{"isActive":true,"type":"reference","identifier":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/"}]},{"anchor":"Every-single-transition-are-dispatched-by-fluidPush-on-FluidStackController","text":"Every single transition are dispatched by fluidPush on FluidStackController","level":2,"type":"heading"},{"code":["sourceViewController.fluidPush(","  destinationViewController, ","  target: .current,","  relation: .modality",")"],"type":"codeListing","syntax":"swift"},{"anchor":"Always-use-fluidPop-to-dismiss-instead-of-UIViewControllerdismiss-UINavigationControllerpopViewController","text":"Always use fluidPop to dismiss instead of UIViewController.dismiss, UINavigationController.popViewController","level":2,"type":"heading"},{"code":["destinationViewController.fluidPop()"],"type":"codeListing","syntax":"swift"},{"level":2,"type":"heading","text":"fuidPush accepts only specified types of UIViewController","anchor":"fuidPush-accepts-only-specified-types-of-UIViewController"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"FluidViewController"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidPopoverViewController"}]}]},{"content":[{"inlineContent":[{"text":"FluidRideauViewController (in extended module)","type":"text"}],"type":"paragraph"}]}]},{"level":2,"text":"How view-tree works","anchor":"How-view-tree-works","type":"heading"},{"inlineContent":[{"text":"Tree (abstract)","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIWindow"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"View ← UIViewController"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← FluidStackController"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"View ← (pushed content view controller)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"View ← (pushed content view controller)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"View ← (pushed content view controller)","type":"text"}]}]}]}]}]}]}]}]}],"type":"unorderedList"},{"anchor":"Avoid-using-modal-presentation","type":"heading","level":2,"text":"Avoid using modal-presentation"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fluidPush"},{"type":"text","text":" fails in a modally presented view controller unless that has FluidStackController."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"UIWindow","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"View ← UIViewController","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"View ← FluidStackController","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"…","type":"text"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TransitionView (created by modal-presentation, style: .fullScreen)"}]}]}],"type":"unorderedList"}]}],"type":"unorderedList"}]}]},{"inlineContent":[{"text":"Basically, modal-presentation adds a new container view to host UIViewController on top of the current tree.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Unless specifying presentation-context or setting modal-presentation style of contextual options."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As FluidStackController works similarly to UINavigationController, it needs to create another FluidStackController on top of the modal in order to display another view controller above the modal."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or present a FluidStackController as modal-presentation, then pushing view controllers."}]},{"level":2,"anchor":"To-display-UIAlertController","text":"To display UIAlertController","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"UIAlertController is built on top of some internal APIs.","type":"text"},{"text":" ","type":"text"},{"text":"We can’t change modal-presentations style, always they present as full-screen.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Adding as a child view controller won’t work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the pure way in UIKit’s ViewController"}]},{"type":"codeListing","code":["let alert: UIAlertController","","self.present(alert, animated: true)"],"syntax":"swift"},{"level":2,"anchor":"Setting-up-to-support-your-app-display-by-fluid-push","type":"heading","text":"Setting up to support your app display by fluid-push"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As to push a view controller to UINavigationController, you must prepare UINavigationController in the hierarchy. fluid-push needs the same thing."}]},{"type":"paragraph","inlineContent":[{"text":"At least the app must have one or more FluidStackController to host view controllers.","type":"text"},{"type":"text","text":" "},{"text":"Wrapping the entrypoint view controller with FluidStackController as following,","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"UIWindow","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Entrypoint(UIViewController)","type":"text"}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"text":"After","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"UIWindow","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Stack (FluidStackController)","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Entrypoint(UIViewController)","type":"text"}]}]}]}]}]}]}]},{"text":"How fluid-push works","level":2,"anchor":"How-fluid-push-works","type":"heading"},{"type":"paragraph","inlineContent":[{"code":"fluidPush","type":"codeVoice"},{"type":"text","text":" method gets a target parameter."},{"type":"text","text":" "},{"type":"text","text":"This parameter indicates how to find a target stack controller to display the given view controller."}]},{"inlineContent":[{"type":"text","text":"As built-in paramter, we have "},{"type":"codeVoice","code":"current"},{"text":", ","type":"text"},{"type":"codeVoice","code":"nearestAncestor"},{"type":"text","text":", "},{"code":"root","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"identifier(_:)"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s like pushing a view controller into another UINavigationController from descendants."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidStackController has an identifier, we can create custom query that uses the identifiers."}]},{"syntax":"swift","code":["extension FluidStackController.Identifier {","","  \/\/\/ front of tab","  public static let loggedOut: Self = .init(\"loggedOut\")","","  \/\/\/ front of tab","  public static let loggedIn: Self = .init(\"loggedIn\")","","}","","extension UIViewController.FluidStackFindStrategy {","","  \/**","  Find stack controller that can display as full-screen.","  (Above TabBarControler.)","  *\/","  public static let fullScreen: Self = .matching(","    name: \"fullScreen\",","    strategies: [","      .identifier(.loggedIn),","      .identifier(.loggedOut),","      .root,","    ]","  )","","}"],"type":"codeListing"},{"type":"codeListing","syntax":"swift","code":["sourceViewController.fluidPush(","  destinationViewController, ","  target: .fullScreen,","  relation: .modality",")"]}],"kind":"content"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/fluidinterfacekit.FluidStack\/documentation\/FluidStack\/MigrationGuide"},"variants":[{"paths":["\/documentation\/fluidstack\/migrationguide"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/fluidinterfacekit.FluidStack\/documentation\/FluidStack"]]},"kind":"article","metadata":{"title":"Migration Guide","modules":[{"name":"FluidStack"}],"roleHeading":"Article","role":"article"},"references":{"doc://fluidinterfacekit.FluidStack/documentation/FluidStack":{"identifier":"doc:\/\/fluidinterfacekit.FluidStack\/documentation\/FluidStack","role":"collection","type":"topic","url":"\/documentation\/fluidstack","kind":"symbol","title":"FluidStack","abstract":[{"inlineContent":[{"type":"text","text":"FluidInterfaceKit"}],"type":"strong"},{"type":"text","text":" provides the advanced infrastructure for your iPhone apps."}]},"https://muukii.github.io/FluidInterfaceKit/documentation/fluidinterfacekit/":{"identifier":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/","title":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/","titleInlineContent":[{"type":"text","text":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/"}],"url":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/","type":"link"}}}