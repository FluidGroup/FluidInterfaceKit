{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Drop-UINavigationController-and-Modal-presentation-use-FluidStackController-instead","level":2,"type":"heading","text":"Drop UINavigationController and Modal-presentation, use FluidStackController instead."},{"type":"paragraph","inlineContent":[{"type":"text","text":"Try to think about creating all of the transitions with UINavigationController."},{"type":"text","text":" "},{"type":"text","text":"Because it could say FluidStackController is just like yet another UINavigationController."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Motivation is here (Motivation section): "},{"type":"reference","isActive":true,"identifier":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/"}]},{"anchor":"Every-single-transition-are-dispatched-by-fluidPush-on-FluidStackController","level":2,"type":"heading","text":"Every single transition are dispatched by fluidPush on FluidStackController"},{"type":"codeListing","syntax":"swift","code":["sourceViewController.fluidPush(","  destinationViewController, ","  target: .current,","  relation: .modality",")"]},{"anchor":"Always-use-fluidPop-to-dismiss-instead-of-UIViewControllerdismiss-UINavigationControllerpopViewController","level":2,"type":"heading","text":"Always use fluidPop to dismiss instead of UIViewController.dismiss, UINavigationController.popViewController"},{"type":"codeListing","syntax":"swift","code":["destinationViewController.fluidPop()"]},{"anchor":"fuidPush-accepts-only-specified-types-of-UIViewController","level":2,"type":"heading","text":"fuidPush accepts only specified types of UIViewController"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidViewController"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidPopoverViewController"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidRideauViewController (in extended module)"}]}]}]},{"anchor":"How-view-tree-works","level":2,"type":"heading","text":"How view-tree works"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tree (abstract)"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIWindow"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← UIViewController"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← FluidStackController"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← (pushed content view controller)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← (pushed content view controller)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← (pushed content view controller)"}]}]}]}]}]}]}]}]}]},{"anchor":"Avoid-using-modal-presentation","level":2,"type":"heading","text":"Avoid using modal-presentation"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fluidPush"},{"type":"text","text":" fails in a modally presented view controller unless that has FluidStackController."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIWindow"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← UIViewController"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"View ← FluidStackController"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"…"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"TransitionView (created by modal-presentation, style: .fullScreen)"}]}]}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basically, modal-presentation adds a new container view to host UIViewController on top of the current tree."},{"type":"text","text":" "},{"type":"text","text":"Unless specifying presentation-context or setting modal-presentation style of contextual options."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As FluidStackController works similarly to UINavigationController, it needs to create another FluidStackController on top of the modal in order to display another view controller above the modal."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or present a FluidStackController as modal-presentation, then pushing view controllers."}]},{"anchor":"To-display-UIAlertController","level":2,"type":"heading","text":"To display UIAlertController"},{"type":"paragraph","inlineContent":[{"type":"text","text":"UIAlertController is built on top of some internal APIs."},{"type":"text","text":" "},{"type":"text","text":"We can’t change modal-presentations style, always they present as full-screen."},{"type":"text","text":" "},{"type":"text","text":"Adding as a child view controller won’t work."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the pure way in UIKit’s ViewController"}]},{"type":"codeListing","syntax":"swift","code":["let alert: UIAlertController","","self.present(alert, animated: true)"]},{"anchor":"Setting-up-to-support-your-app-display-by-fluid-push","level":2,"type":"heading","text":"Setting up to support your app display by fluid-push"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As to push a view controller to UINavigationController, you must prepare UINavigationController in the hierarchy. fluid-push needs the same thing."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At least the app must have one or more FluidStackController to host view controllers."},{"type":"text","text":" "},{"type":"text","text":"Wrapping the entrypoint view controller with FluidStackController as following,"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIWindow"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Entrypoint(UIViewController)"}]}]}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"UIWindow"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stack (FluidStackController)"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Entrypoint(UIViewController)"}]}]}]}]}]}]}]},{"anchor":"How-fluid-push-works","level":2,"type":"heading","text":"How fluid-push works"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fluidPush"},{"type":"text","text":" method gets a target parameter."},{"type":"text","text":" "},{"type":"text","text":"This parameter indicates how to find a target stack controller to display the given view controller."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As built-in paramter, we have "},{"type":"codeVoice","code":"current"},{"type":"text","text":", "},{"type":"codeVoice","code":"nearestAncestor"},{"type":"text","text":", "},{"type":"codeVoice","code":"root"},{"type":"text","text":" and "},{"type":"codeVoice","code":"identifier(_:)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s like pushing a view controller into another UINavigationController from descendants."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"FluidStackController has an identifier, we can create custom query that uses the identifiers."}]},{"type":"codeListing","syntax":"swift","code":["extension FluidStackController.Identifier {","","  \/\/\/ front of tab","  public static let loggedOut: Self = .init(\"loggedOut\")","","  \/\/\/ front of tab","  public static let loggedIn: Self = .init(\"loggedIn\")","","}","","extension UIViewController.FluidStackFindStrategy {","","  \/**","  Find stack controller that can display as full-screen.","  (Above TabBarControler.)","  *\/","  public static let fullScreen: Self = .matching(","    name: \"fullScreen\",","    strategies: [","      .identifier(.loggedIn),","      .identifier(.loggedOut),","      .root,","    ]","  )","","}"]},{"type":"codeListing","syntax":"swift","code":["sourceViewController.fluidPush(","  destinationViewController, ","  target: .fullScreen,","  relation: .modality",")"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/fluidstack\/migrationguide"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/FluidStack\/documentation\/FluidStack\/MigrationGuide","interfaceLanguage":"swift"},"kind":"article","metadata":{"roleHeading":"Article","title":"Migration Guide","role":"article","modules":[{"name":"FluidStack"}]},"hierarchy":{"paths":[["doc:\/\/FluidStack\/documentation\/FluidStack"]]},"references":{"https://muukii.github.io/FluidInterfaceKit/documentation/fluidinterfacekit/":{"title":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/","titleInlineContent":[{"type":"text","text":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/"}],"type":"link","identifier":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/","url":"https:\/\/muukii.github.io\/FluidInterfaceKit\/documentation\/fluidinterfacekit\/"},"doc://FluidStack/documentation/FluidStack":{"role":"collection","title":"FluidStack","abstract":[{"type":"strong","inlineContent":[{"type":"text","text":"FluidInterfaceKit"}]},{"type":"text","text":" provides the advanced infrastructure for your iPhone apps."}],"identifier":"doc:\/\/FluidStack\/documentation\/FluidStack","kind":"symbol","type":"topic","url":"\/documentation\/fluidstack"}}}